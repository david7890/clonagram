{"version":3,"file":"intl-relativeformat.min.js","sources":["../../lib/diff.js","../../lib/index.js"],"sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nfunction daysToYears(days) {\n    // 400 years have 146097 days (taking into account leap year rules)\n    return (days * 400) / 146097;\n}\n// Thanks to date-fns\n// https://github.com/date-fns/date-fns\n// MIT Â© Sasha Koss\nvar MILLISECONDS_IN_MINUTE = 60000;\nvar MILLISECONDS_IN_DAY = 86400000;\nfunction startOfDay(dirtyDate) {\n    var date = new Date(dirtyDate);\n    date.setHours(0, 0, 0, 0);\n    return date;\n}\nfunction differenceInCalendarDays(dirtyDateLeft, dirtyDateRight) {\n    var startOfDayLeft = startOfDay(dirtyDateLeft);\n    var startOfDayRight = startOfDay(dirtyDateRight);\n    var timestampLeft = startOfDayLeft.getTime() -\n        startOfDayLeft.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;\n    var timestampRight = startOfDayRight.getTime() -\n        startOfDayRight.getTimezoneOffset() * MILLISECONDS_IN_MINUTE;\n    // Round the number of days to the nearest integer\n    // because the number of milliseconds in a day is not constant\n    // (e.g. it's different in the day of the daylight saving time clock shift)\n    return Math.round((timestampLeft - timestampRight) / MILLISECONDS_IN_DAY);\n}\nexport default function diff(from, to) {\n    // Convert to ms timestamps.\n    from = +from;\n    to = +to;\n    var millisecond = Math.round(to - from), second = Math.round(millisecond / 1000), minute = Math.round(second / 60), hour = Math.round(minute / 60);\n    // We expect a more precision in rounding when dealing with\n    // days as it feels wrong when something happended 13 hours ago and\n    // is regarded as \"yesterday\" even if the time was this morning.\n    var day = differenceInCalendarDays(to, from);\n    var week = Math.round(day / 7);\n    var rawYears = daysToYears(day), month = Math.round(rawYears * 12), year = Math.round(rawYears);\n    return {\n        second: second,\n        'second-short': second,\n        'second-narrow': second,\n        minute: minute,\n        'minute-short': minute,\n        'minute-narrow': minute,\n        hour: hour,\n        'hour-short': hour,\n        'hour-narrow': hour,\n        day: day,\n        'day-short': day,\n        'day-narrow': day,\n        week: week,\n        'week-short': week,\n        'week-narrow': week,\n        month: month,\n        'month-short': month,\n        'month-narrow': month,\n        year: year,\n        'year-short': year,\n        'year-narrow': year\n    };\n}\n//# sourceMappingURL=diff.js.map","/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\nimport diff from './diff';\n// -----------------------------------------------------------------------------\nvar SUPPORTED_FIELDS = [\n    \"second\" /* second */,\n    \"second-short\" /* secondShort */,\n    \"minute\" /* minute */,\n    \"minute-short\" /* minuteShort */,\n    \"hour\" /* hour */,\n    \"hour-short\" /* hourShort */,\n    \"day\" /* day */,\n    \"day-short\" /* dayShort */,\n    \"month\" /* month */,\n    \"month-short\" /* monthShort */,\n    \"year\" /* year */,\n    \"year-short\" /* yearShort */\n];\nfunction isValidUnits(units) {\n    if (!units || ~SUPPORTED_FIELDS.indexOf(units)) {\n        return true;\n    }\n    if (typeof units === 'string') {\n        var suggestion = /s$/.test(units) && units.substr(0, units.length - 1);\n        if (suggestion &&\n            ~SUPPORTED_FIELDS.indexOf(suggestion)) {\n            throw new Error(\"\\\"\" + units + \"\\\" is not a valid IntlRelativeFormat 'units' value, did you mean: \" + suggestion);\n        }\n    }\n    throw new Error(\"\\\"\" + units + \"\\\" is not a valid IntlRelativeFormat 'units' value, it must be one of: \" + SUPPORTED_FIELDS.join('\", \"'));\n}\nfunction resolveStyle(style) {\n    // Default to \"best fit\" style.\n    if (!style) {\n        return \"best fit\" /* bestFit */;\n    }\n    if (style === 'best fit' || style === 'numeric') {\n        return style;\n    }\n    throw new Error(\"\\\"\" + style + \"\\\" is not a valid IntlRelativeFormat 'style' value, it must be one of: 'best fit' or 'numeric'\");\n}\nfunction selectUnits(diffReport) {\n    var fields = SUPPORTED_FIELDS.filter(function (field) {\n        return field.indexOf('-short') < 1;\n    });\n    var units = fields[0];\n    for (var _i = 0, fields_1 = fields; _i < fields_1.length; _i++) {\n        units = fields_1[_i];\n        if (Math.abs(diffReport[units]) < RelativeFormat.thresholds[units]) {\n            break;\n        }\n    }\n    return units;\n}\nvar RelativeFormat = (function (locales, options) {\n    if (options === void 0) { options = {}; }\n    var resolvedOptions = {\n        style: resolveStyle(options.style),\n        units: isValidUnits(options.units) && options.units\n    };\n    var numeric = resolvedOptions.style === 'best fit' ? 'auto' : 'always';\n    var rtf = new Intl.RelativeTimeFormat(locales, {\n        numeric: numeric\n    });\n    return {\n        format: function (date, options) {\n            var now = options && options.now !== undefined\n                ? options.now === null\n                    ? 0\n                    : options.now\n                : Date.now();\n            if (date === undefined) {\n                date = now;\n            }\n            // Determine if the `date` and optional `now` values are valid, and throw a\n            // similar error to what `Intl.DateTimeFormat#format()` would throw.\n            if (!isFinite(now)) {\n                throw new RangeError('The `now` option provided to IntlRelativeFormat#format() is not ' +\n                    'in valid range.');\n            }\n            if (!isFinite(date)) {\n                throw new RangeError('The date value provided to IntlRelativeFormat#format() is not ' +\n                    'in valid range.');\n            }\n            var diffReport = diff(now, date);\n            var units = resolvedOptions.units || selectUnits(diffReport);\n            var diffInUnits = diffReport[units];\n            var style = units.substring(units.length - 6, units.length) === '-short'\n                ? 'narrow'\n                : 'long';\n            var rtfUnit = units.replace('-short', '');\n            return new Intl.RelativeTimeFormat(locales, {\n                numeric: numeric,\n                style: style\n            }).format(diffInUnits, rtfUnit);\n        },\n        resolvedOptions: function () {\n            return {\n                locale: rtf.resolvedOptions().locale,\n                style: resolvedOptions.style,\n                units: resolvedOptions.units\n            };\n        }\n    };\n});\n// Define public `defaultLocale` property which can be set by the developer, or\n// it will be set when the first RelativeFormat instance is created by\n// leveraging the resolved locale from `Intl`.\nRelativeFormat.defaultLocale = 'en';\nRelativeFormat.thresholds = {\n    second: 45,\n    'second-short': 45,\n    minute: 45,\n    'minute-short': 45,\n    hour: 22,\n    'hour-short': 22,\n    day: 26,\n    'day-short': 26,\n    month: 11,\n    'month-short': 11 // months to year\n};\nexport default RelativeFormat;\n//# sourceMappingURL=index.js.map"],"names":["MILLISECONDS_IN_MINUTE","MILLISECONDS_IN_DAY","startOfDay","dirtyDate","date","Date","setHours","diff","from","to","millisecond","Math","round","second","minute","hour","day","dirtyDateLeft","dirtyDateRight","startOfDayLeft","startOfDayRight","timestampLeft","getTime","getTimezoneOffset","timestampRight","differenceInCalendarDays","week","rawYears","days","daysToYears","month","year","second-short","second-narrow","minute-short","minute-narrow","hour-short","hour-narrow","day-short","day-narrow","week-short","week-narrow","month-short","month-narrow","year-short","year-narrow","SUPPORTED_FIELDS","RelativeFormat","locales","options","resolvedOptions","style","Error","resolveStyle","units","indexOf","suggestion","test","substr","length","join","isValidUnits","numeric","rtf","Intl","RelativeTimeFormat","format","now","undefined","isFinite","RangeError","diffReport","fields","filter","field","_i","fields_1","abs","thresholds","selectUnits","diffInUnits","substring","rtfUnit","replace","locale","defaultLocale"],"mappings":"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"}