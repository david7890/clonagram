'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var PropTypes = require('prop-types');
var atom = require('atom-js');

var BaseComponent = require('./BaseComponent.js');

var FlashLightButton = function (_BaseComponent) {
	_inherits(FlashLightButton, _BaseComponent);

	function FlashLightButton() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, FlashLightButton);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FlashLightButton.__proto__ || Object.getPrototypeOf(FlashLightButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
			flashLightEnabled: false
		}, _this.handleClick = function () {
			var webcam = _this.props.webcam;

			var track = webcam.video.srcObject.getVideoTracks()[0];
			var flashLightEnabledNow = !_this.state.flashLightEnabled;
			track.applyConstraints({
				advanced: [{ torch: flashLightEnabledNow }]
			});
			_this.setState({ flashLightEnabled: flashLightEnabledNow });
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(FlashLightButton, [{
		key: 'render',
		value: function render() {
			var _props = this.props,
			    use_ImageCapture_API = _props.use_ImageCapture_API,
			    photoCapabilities = _props.photoCapabilities;
			var flashLightEnabled = this.state.flashLightEnabled;


			if (!use_ImageCapture_API || !photoCapabilities || !photoCapabilities.fillLightMode || !photoCapabilities.fillLightMode.includes('flash')) return null;

			var cn = this.props.cssPrefix + '__flash-light-button';

			return React.createElement(
				'button',
				{
					disabled: !this.props.live,
					className: cn + ' ' + cn + '--' + (flashLightEnabled ? 'enabled' : 'disabled'),
					type: 'button',
					onClick: this.handleClick
				},
				this.props.flash_light_node
			);
		}
	}]);

	return FlashLightButton;
}(BaseComponent);

FlashLightButton.propTypes = {
	webcam: PropTypes.object.isRequired,
	model: PropTypes.object.isRequired,
	cssPrefix: PropTypes.string.isRequired
};
FlashLightButton.defaultProps = {};


module.exports = atom.reactConnect('model', ['live', 'use_ImageCapture_API', 'photoCapabilities', 'flash_light_node'])(FlashLightButton);