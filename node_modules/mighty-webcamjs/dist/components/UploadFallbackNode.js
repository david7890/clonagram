'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = require('react');
var PropTypes = require('prop-types');
var atom = require('atom-js');

var BaseComponent = require('./BaseComponent.js');

var UploadFallbackNode = function (_BaseComponent) {
	_inherits(UploadFallbackNode, _BaseComponent);

	function UploadFallbackNode() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, UploadFallbackNode);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = UploadFallbackNode.__proto__ || Object.getPrototypeOf(UploadFallbackNode)).call.apply(_ref, [this].concat(args))), _this), _initialiseProps.call(_this), _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(UploadFallbackNode, [{
		key: 'setDisabled',
		value: function setDisabled(value) {
			this.setState({ disabled: value });
		}
	}, {
		key: 'render',
		value: function render() {
			var _props = this.props,
			    webcam = _props.webcam,
			    capture_mode = _props.capture_mode,
			    camera = _props.camera;

			var accept = webcam.constants.MODE_ACCEPTS[capture_mode];
			var capture = webcam.constants.WEBRTC_CAMERAS[camera];

			return React.createElement(
				'div',
				{
					className: this.props.cssPrefix + '__upload-fallback ' + this.props.className
				},
				React.createElement('input', {
					disabled: this.state.disabled,
					type: 'file',
					accept: accept,
					capture: this.props.capture ? capture : false,
					onChange: this.handleChange,
					'data-channel': this.props.communicationChannel
				})
			);
		}
	}]);

	return UploadFallbackNode;
}(BaseComponent);

UploadFallbackNode.propTypes = {
	webcam: PropTypes.object,
	capture: PropTypes.bool,
	className: PropTypes.string,
	model: PropTypes.object,
	cssPrefix: PropTypes.string,
	communicationChannel: PropTypes.string
};
UploadFallbackNode.defaultProps = {};

var _initialiseProps = function _initialiseProps() {
	var _this2 = this;

	this.state = {
		disabled: false
	};

	this.handleChange = function () {
		for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
			args[_key2] = arguments[_key2];
		}

		var webcam = _this2.props.webcam;


		var uploadHandler = _this2.props.capture_mode === webcam.constants.CAPTURE_MODE_PHOTO ? webcam.handleImageInput : webcam.helpers.videoRecorder.handleFileFallbackVideoInput;

		if (_this2.props.onChange) {
			var _props2;

			(_props2 = _this2.props).onChange.apply(_props2, args);
		}

		return uploadHandler.apply(webcam, args);
	};
};

module.exports = atom.reactConnect('model', ['live', 'capture_mode', 'camera'])(UploadFallbackNode);